
//- @pugdoc
  name: textarea
  description: A mixin to create K-scaffold compatible textareas. 
  arguments:
    - {object} textObj - See {@link input} for information on valid properties of the textObj.
  attributes:
  example: |
    include _htmlelements.pug
    +textarea({name:'my textarea',class:'some-class',trigger:{affects:['an_attribute']}})
mixin textarea(obj)
  - obj.class = obj.class ? replaceProblems(obj.class) : undefined;
  - obj.name = replaceSpaces(obj.name);
  - obj.title = obj.title || attrTitle(obj.name);
  - obj.name = `attr_${obj.name}`;
  - addFieldToFieldsetObj(obj);
  - storeTrigger(obj);
  - const elementObj = makeElementObj(obj);
  textarea&attributes(elementObj)
//-End Mixin




//- @pugdoc
  name: headedTextarea
  description: Creates a construction for pairing a header with a textarea. Currently is locked to creating an `h3`.  This mixin also accepts classes and IDs appended directly to it (see the second example)
  arguments:
    - {object} textObj - The object describing the textarea as per {@link textarea}
    - {string} header - The `data-i18n` translation key to use for the header
  attributes:
  example: |
    include _htmlelements.pug
    +headedTextarea({textObj:{name:'character description','data-i18n-placeholder':'The description of your character'},header:'description'})
    //With class appended to the mixin itself
    +headedTextarea({textObj:{name:'character description','data-i18n-placeholder':'The description of your character'},header:'description'}).character-description
mixin headedTextarea({textObj,header})
  .headed-textarea&attributes(attributes)
    - textObj.class = textObj.class ? `${textObj.class} headed-textarea__textarea` : 'headed-textarea__textarea';
    +h3({'data-i18n':header,class:'headed-textarea__header'})
    +textarea(textObj)
//-End Mixin




//- @pugdoc
  name: adaptiveTextarea
  description: Creates an html construction for creating a [content-scaled](https://wiki.roll20.net/CSS_Wizardry#Content-scaled_Inputs) textarea. You can apply classes and IDs to the container div by appending them to the mixin call (see the second example).
  arguments:
    - {object} textObj - The object describing the textarea as per the {@link textarea} mixin.
  attributes:
  example: |
    include _htmlelements.pug
    +adaptiveTextarea({name:'character description'})

    //Appending the class directly to the mixin
    +adaptiveTextarea({name:'character description'}).custom-class
mixin adaptiveTextarea(textObj)
  .adaptive.adaptive--text&attributes(attributes)
    - let spanObj = {name:textObj.name,class:'adaptive--text__span'};
    - textObj.class = textObj.class ? `${textObj.class} adaptive--text__textarea` : 'adaptive--text__textarea';
    +span(spanObj)
    +textarea(textObj)
//- End Mixin

