//This file will store all of our generic styling for the sheet. Styling for specific sections will be done in individual scss files to make the code easier to read.
@use '_mixinsandplaceholders';

// Clears the default Roll20 styling from all elements so that we can style them as we want more easily. We are using 3 classes here because we have to use at least that level of specificity to overcome many of the default Roll20 styles.
html{
  font-size:16px;
}
.ui-dialog{
  @extend %font-vars;
  .tab-content .charsheet{
    select,
    textarea,
    input,
    .uneditable-input,
    label,
    button{
      all: initial;
    }
  }
}

// styles that should be applied to our sheet as a whole. I've separated them out from the Clearing. As with our style clearing definition above, we're using 3 classes to ensure that we have enough specificity. This specificity level is known as 0-3-0. A great specificity calculator for comparing the specificities of CSS declarations is https://specificity.keegan.st/
.ui-dialog .tab-content .charsheet{
  /*
    First of all we apply our default styles.
    Note that because we are using the placeholder, these styles would be first up in the cascade even if we put the extend declaration last.
    This is done first so that when we read the code, we can easily see that it is applied, and anything after it will overwrite those default styles.
  */
  @extend %defaultStyles;
}
//the declarations for styles specifically applying to our main element.
#main{
  display:grid;
}
#character{
  display:grid;
  gap:var(--grid-gap);
  grid-template-columns:repeat(auto-fill,minmax(16rem,1fr));//This one line is our secret sauce for making our sheet responsive to just about any screen width that our sheet might encounter from tiny phone screens up to stretching across several superwide monitors. For more information about auto-fit and auto-fill, I recommend the CSS-tricks summary: https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/.
}